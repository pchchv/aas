package oauth

import (
	"encoding/base64"
	"testing"

	"github.com/stretchr/testify/assert"
)

func getTestPublicKey(t *testing.T) []byte {
	publicKeyBase64 := "LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBb2Q3dFRUeVlCUjI0aDg1WEZaUkcKcUg4QXNuRTBXVHliRFZELzRYajdWSHY3RWErclU1S2cyVFdKNjhkL09BcCtNK1lMYnVMYXdIVk1mWWtQM0lhWgpTR1d6cHdCVXhxc0lmWTlLbEdaWjN3aGJIWi9EZWRCU2I1UjNkdnJjUEIvQmcrMkFucUVnRkV2N3Y4djZFT1psClJNU0RxR0t2VEU0a083UUFUR0JZbUJoTDZmNytPUnlRRmNLdUFZZ29DZmlKOG1hb3FkK1dIREk5TWMyTlBncncKMzhOaW1mQ3ZFM3VWbXljdFFyMDN3TTAyT1A0M0IyS3pCdUREc2ZKdUZWSVFWTUVtU2IyQ2ZqMjloWkpGMCtJWgpVZWYvVHhXQTZyVWpTK1pYSGtudXlYNDBVb1pYYUFJVU5zbUVEeVUxWHRKRTh5Ym1xSHdNK3BjT2dCSzh3TElXCk5LVkVFSDVtMjBsaStqMjdnSThvcVlNamJCYjdyYlI1L2JnSmdjL05qU2c4bTZrZDJzVC9TSmltMlI2eENFOEgKeVdTbEdvQkxIZTlSQUJYcUR4UTg5RCtiTGRRb1V5R1N2RVJVWXBBNzZYNGViY2tqdnR0UFl3cTFSWEZuS0VzbwpoUTQ0SVFySEFMTTRmcTQyRXF2WkZvTUxQVmhvT0xOSWd2NUlhU1lHZm9IMW1uQlZPZkJzZ3B4ejk0czRCNTJyCjFNcE5GaE1qaG1SSXBCcWYvSHNPalNtM05mUG1pYkVVQ0c2OEo3aSthU3ZvVTdwSnVZQzgyQW1TWmwxeWxLOTcKRjRUUG1RaGJUNG5yMlZxMS9oMGpwQUIzNW5DUS9tM09Sckl6RXYzL0F0UEdnbktlWENML3M0ZUQzd2hzbkNaTAowVmVMNmVFYWhoUFYydW05VlZzeVowVUNBd0VBQVE9PQotLS0tLUVORCBSU0EgUFVCTElDIEtFWS0tLS0tCg=="
	publicKeyBytes, err := base64.StdEncoding.DecodeString(publicKeyBase64)
	assert.NoError(t, err)

	return publicKeyBytes
}

func getTestPrivateKey(t *testing.T) []byte {
	privateKeyBase64 := "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKSndJQkFBS0NBZ0VBb2Q3dFRUeVlCUjI0aDg1WEZaUkdxSDhBc25FMFdUeWJEVkQvNFhqN1ZIdjdFYStyClU1S2cyVFdKNjhkL09BcCtNK1lMYnVMYXdIVk1mWWtQM0lhWlNHV3pwd0JVeHFzSWZZOUtsR1paM3doYkhaL0QKZWRCU2I1UjNkdnJjUEIvQmcrMkFucUVnRkV2N3Y4djZFT1psUk1TRHFHS3ZURTRrTzdRQVRHQlltQmhMNmY3KwpPUnlRRmNLdUFZZ29DZmlKOG1hb3FkK1dIREk5TWMyTlBncnczOE5pbWZDdkUzdVZteWN0UXIwM3dNMDJPUDQzCkIyS3pCdUREc2ZKdUZWSVFWTUVtU2IyQ2ZqMjloWkpGMCtJWlVlZi9UeFdBNnJValMrWlhIa251eVg0MFVvWlgKYUFJVU5zbUVEeVUxWHRKRTh5Ym1xSHdNK3BjT2dCSzh3TElXTktWRUVINW0yMGxpK2oyN2dJOG9xWU1qYkJiNwpyYlI1L2JnSmdjL05qU2c4bTZrZDJzVC9TSmltMlI2eENFOEh5V1NsR29CTEhlOVJBQlhxRHhRODlEK2JMZFFvClV5R1N2RVJVWXBBNzZYNGViY2tqdnR0UFl3cTFSWEZuS0Vzb2hRNDRJUXJIQUxNNGZxNDJFcXZaRm9NTFBWaG8KT0xOSWd2NUlhU1lHZm9IMW1uQlZPZkJzZ3B4ejk0czRCNTJyMU1wTkZoTWpobVJJcEJxZi9Ic09qU20zTmZQbQppYkVVQ0c2OEo3aSthU3ZvVTdwSnVZQzgyQW1TWmwxeWxLOTdGNFRQbVFoYlQ0bnIyVnExL2gwanBBQjM1bkNRCi9tM09Sckl6RXYzL0F0UEdnbktlWENML3M0ZUQzd2hzbkNaTDBWZUw2ZUVhaGhQVjJ1bTlWVnN5WjBVQ0F3RUEKQVFLQ0FnQWZKS1hoWTFRWVArU2Q5RndhNGNGS2I4enhpQWc3VndhNTVDaW05OERiTzFOTnpzK1dyN0pVdUJGRwpGTWJzUUZDUnFhUHZmS1A3dlZXdkhXeTQwQWl6dmlWM2J2L2dqVTEvNHM3RmlIK29BcEtOTzR5L1pnNUdPM2xVCm9lVTNpQ0NTUW1LcG9uUnFrMGZuV2RaTjVCWDl5aFZPazFZSXgwdi9WSjF1RkdkWE0rMS9JcmxFd2JNVERMYXYKd3NONVQ2RXl5ditPVjE4cEk1MVVkS2pGRkJQTjZXaVNGNVdIbVJKcW5Ibi95aW5zNVU2V1hvcTEyQTU3dDBqUApkc1lwUWZXMGFNajJEUWtMUXRPdzNEaWxFRzR3clFNWTh4a3ZqeFF3YVN1L3Z4ZTdHcFgwZnJaWVkzWUNLSGxJCjlLNjFCSjJSYnAyWU11M0lWTUhNY0U1eWdKRDIxN0pLbzZKa3RRcTRoT09KRElhclhkSjIzT3N3OEdteEJyN1EKcSswQXhuVjd3NnRWRDVGOTg4SUpvc05OZW05cmgrUUN6YnhtN3BQc2JXT1hvdUlmQ2dyT0szZkJaZzg4QUs5UQpVRVZFSHlJUk5qMzBJSmw5MDh1d0JoWm9JVzJERk5xdERCQ1BJT09iZDFkblNLT2xlbjdRd3p0ajE1ak1QNm9oCnp3UU1pT0FHK051RmphY0FIRzRIWEx5NTZYK056RmJ6ZEZiWWZqTkZ5aElUd1Q5eC8vY3phSzVTcm8xY3ZFR0wKanJacFpXU1ZHOEJucVA4cGR3d3lwaml5KzM1alVGVnhkOWhVS3hBcjlHTkE3TFNsMG5qUHBRSTJiNnNSck92Tgp6KzlOR0h2UHI0N0F2WHJZazEvb01idHZLaHdmT0NqNjNZVDhOV1Z0YWxPRGtGNWdBUUtDQVFFQXlLc1RzUE4wCit4T0JYWDlDVW5kS25oemFIM1BaVnVxUmZrblJLbGZHVDFRYmQ2b1FLSWIwWWp6WUlDRWdTVGJNbTNMVWFOeEwKcUNqaktLbmRzL1ZWL0lSTjJYN1FaZHBtczFwU04zdnFSdnJxQzB4amp6RzhlZGhib1lKcGtZSHpoeENuc055eQpFNzZUTWpQSTdqTDNyQ0ROUDc3dkhJY0J1dUIrTUpyZVZXczN4RVFrR2ZaSldHTXNTNVRLY2pGQUpPV2JCaXhFCmY5WmJNNnRnc3lBUUdmU05sRXJXQll2c1kxemZtTVpWRmJIUTV1SmZkamUxN2l6TnNkNWI3c2dhbFR2L1ZXNW4KWXZKSHNaRzlKYldRdG9QTTQ3SFlmb21JMDhIMzV6K1M0YVZhdXVOWVpLT1RkYXB2ejRnOXE0dVhSS1plUFVlMgpLMHg0MXhUSzZQQ3ZSUUtDQVFFQXpvRXZoVldCdWZLeVVpZDBReExlSDVBQjNubkRNbndnUTJxTkh4VFdFS3pZCm5BVkVneDduZHY5OGorNjhqelZpNGhqY1Zxd2tvSTIxZWhKWktRVWdxaVo3ekg2bllrWE4wb2RVOVhUdHpzSGsKRjlkRWxsOFpSWkd4elFCMFFkN1dnb3pqcWF4YjN5YlZPOEN5WWFNbllsbTd3N1hxRllPNTVpLzBCL1c4UzQxVgpITEtSRXJya29ta2R0Q0pjNWhnYTg4eU5qNkV0SHhzL0J5aWcxRzhrc2RycGdmeVBWSTJMZnIrS3RwNGRKVmJOCmlLMnNQVmVMTU4wcXFRaTNSdCs0SjdMcFhLUllBM3A0M0FRLy9paXdmZ1NLOTEwVUVnbUlBVitjTGl6VU9mdkwKVk8xcnV3bmdlZlAvM2lwcWx0MWEyM3hnS1VIdmpZdlN3bUhFVlJwWUFRS0NBUUI3WHRLSVkrVnp4NVl0U1dRWgpGMFpFMXpBelRpSTlFWkhKdHRCbDIva01KSVdPbUh1K3J0bm8yOGQwV1dsa0dkREpjVnV0N0dLSFREdjhjQkxoCjVOK3NsQnJZc09LbS9CTlFDU09yQVFBVUM0ZUEwc0lTODEwUS9EZTVvRmdQSVhuN2UvM2MrcEp4R1NXZUk4QlEKMGZ6N1VsOWQ1YUZVUkp5SHJDVm85STNrcmpwbTdBM1YrRmszZ2lGbGhtREF2QTdYb0dJaTlXeFh2QTN1UWxyOQpSYVVnai8zTFFnYzYrYituaHgzZzYyNjhHOHAzYUkyUVBNZ1pXbXBNQkkwNHpNV3JJbXZrdGkvUjRXcTZmUU53Ci82T3Mwbk5ST2JJRWVjSXBqb00vSlJMRXI4aU1SZUcrWGVMMjRJWkZiVm1jOGdGYUwzNlk1bEhWWlBxV0lTNXUKOENxUkFvSUJBR3dBbkwzN2JwRzJJUlZlbFN2UFhtVGJpRjYzQ0NRTFQwUnpJY096dmhHU2xPZGt5ZVJaOFcwSApTanBzL2lsWUhwTnB0VE9QYk1pYjFPSTNYbkpad0MrOVdOb25FNXdPTGd1QnhDbHNNa1FFbkNycjUyOU41WVhCCklXQzZjQk5UWEpXQzRqOEhhalZYdGdZK1RnMUtxM3FBdS9jcjJYWFBJeGNFMVhpa1NRcXFyRzBKNTE0SWFUT1kKRG5UNzArSnprUVVaWXFCUUI2MVJMckdyeWhIUTN6dzE1aEtaNk15c0N0MExpSnppTFJRdVJlaktERjg0dmcrYwpYSWR6aTRlQjBtclE0OFFVSUFRUnRjdzhYTXVzdEVIMFZrbnhZR0hlb2tjMW5oVjRWTGJPdmhWNDV2TTN3ek9GCkxia2dMZ2NoVmplYzRSNHk0ZnNCdWdUMzVSc3RZQUVDZ2dFQUV5VTZkblRHZzFHZjM0Y0FRM1B0a09qMDRTblMKV0dVQTZPWTd4bHQ5WHBzclF0ekpNS0NaOEZiVWZBeVp2UkNvclhpN01BZzdwNTRUdWk5cmhvRlFMYW1ZRnJEZgpncEk3WjNCUVF3dkZCNUE3eWdQQmVRdzJHd2xkYVBuKzJrZTduZDZKdGIvZ1RJSjdFbmtLY041SXlmNHdqQ09TCjlWRmw3c2dldHMzMFFIYjlhZVBKTUJ4emlDM3N0K0x5azdEdmZMT2tOT0RvbHgyTE5aNW1hYkRiZ3BzLzlzdlIKU0ZYZEg5dGJRYWp5SEZnQnZCMVF6b3pSdTBnbGEvc0RHT0Z0MWtnQTE0OUlnM2ZSN3FhNGRIWDFoU012MmZPaQpNT1RFRDZxa1JwSHdGU3FsaVZPdzNPVkdOcnh5MGphWlhRSVZINUlqZmVFTUQwYnZzSS9uZ0lrTmFnPT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
	privateKeyBytes, err := base64.StdEncoding.DecodeString(privateKeyBase64)
	assert.NoError(t, err)

	return privateKeyBytes
}
