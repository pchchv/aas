// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/vektra/mockery/v2/pkg"
)

// OutputStreamProvider is an autogenerated mock type for the OutputStreamProvider type
type OutputStreamProvider struct {
	mock.Mock
}

type OutputStreamProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *OutputStreamProvider) EXPECT() *OutputStreamProvider_Expecter {
	return &OutputStreamProvider_Expecter{mock: &_m.Mock}
}

// GetWriter provides a mock function with given fields: _a0, _a1
func (_m *OutputStreamProvider) GetWriter(_a0 context.Context, _a1 *pkg.Interface) (io.Writer, error, pkg.Cleanup) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetWriter")
	}

	var r0 io.Writer
	var r1 error
	var r2 pkg.Cleanup
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.Interface) (io.Writer, error, pkg.Cleanup)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.Interface) io.Writer); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Writer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pkg.Interface) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *pkg.Interface) pkg.Cleanup); ok {
		r2 = rf(_a0, _a1)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(pkg.Cleanup)
		}
	}

	return r0, r1, r2
}

// OutputStreamProvider_GetWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWriter'
type OutputStreamProvider_GetWriter_Call struct {
	*mock.Call
}

// GetWriter is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pkg.Interface
func (_e *OutputStreamProvider_Expecter) GetWriter(_a0 interface{}, _a1 interface{}) *OutputStreamProvider_GetWriter_Call {
	return &OutputStreamProvider_GetWriter_Call{Call: _e.mock.On("GetWriter", _a0, _a1)}
}

func (_c *OutputStreamProvider_GetWriter_Call) Run(run func(_a0 context.Context, _a1 *pkg.Interface)) *OutputStreamProvider_GetWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pkg.Interface))
	})
	return _c
}

func (_c *OutputStreamProvider_GetWriter_Call) Return(_a0 io.Writer, _a1 error, _a2 pkg.Cleanup) *OutputStreamProvider_GetWriter_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OutputStreamProvider_GetWriter_Call) RunAndReturn(run func(context.Context, *pkg.Interface) (io.Writer, error, pkg.Cleanup)) *OutputStreamProvider_GetWriter_Call {
	_c.Call.Return(run)
	return _c
}

// NewOutputStreamProvider creates a new instance of OutputStreamProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOutputStreamProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *OutputStreamProvider {
	mock := &OutputStreamProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
