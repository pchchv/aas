// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	pkg "github.com/vektra/mockery/v2/pkg"
)

// WalkerVisitor is an autogenerated mock type for the WalkerVisitor type
type WalkerVisitor struct {
	mock.Mock
}

type WalkerVisitor_Expecter struct {
	mock *mock.Mock
}

func (_m *WalkerVisitor) EXPECT() *WalkerVisitor_Expecter {
	return &WalkerVisitor_Expecter{mock: &_m.Mock}
}

// VisitWalk provides a mock function with given fields: _a0, _a1
func (_m *WalkerVisitor) VisitWalk(_a0 context.Context, _a1 *pkg.Interface) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for VisitWalk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.Interface) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalkerVisitor_VisitWalk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitWalk'
type WalkerVisitor_VisitWalk_Call struct {
	*mock.Call
}

// VisitWalk is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pkg.Interface
func (_e *WalkerVisitor_Expecter) VisitWalk(_a0 interface{}, _a1 interface{}) *WalkerVisitor_VisitWalk_Call {
	return &WalkerVisitor_VisitWalk_Call{Call: _e.mock.On("VisitWalk", _a0, _a1)}
}

func (_c *WalkerVisitor_VisitWalk_Call) Run(run func(_a0 context.Context, _a1 *pkg.Interface)) *WalkerVisitor_VisitWalk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pkg.Interface))
	})
	return _c
}

func (_c *WalkerVisitor_VisitWalk_Call) Return(_a0 error) *WalkerVisitor_VisitWalk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WalkerVisitor_VisitWalk_Call) RunAndReturn(run func(context.Context, *pkg.Interface) error) *WalkerVisitor_VisitWalk_Call {
	_c.Call.Return(run)
	return _c
}

// NewWalkerVisitor creates a new instance of WalkerVisitor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalkerVisitor(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalkerVisitor {
	mock := &WalkerVisitor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
